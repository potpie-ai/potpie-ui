name: Build, Deploy, and Cleanup Cloud Run on PR

on:
  pull_request:
    types: [opened, synchronize, closed]

env:
  PROJECT_ID: ${{ secrets.STAGE_GCLOUD_PROJECT_ID }}
  GAR_ZONE: us-central1 # artifact registry zone
  GAR_REPO: momentum-frontend # artifact registry repository

jobs:
  build-deploy-comment:
    if: github.event.action != 'closed'
    name: Build, Deploy, and Comment
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      pull-requests: 'write'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: false

    # Setup gcloud CLI
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.STAGE_GKE_SA_KEY }}'

    # Install gke-gcloud-auth-plugin
    - name: Install gke-gcloud-auth-plugin
      run: |-
        sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates gnupg
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt-get update && sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - name: Docker configuration
      run: |-
        gcloud auth configure-docker $GAR_ZONE-docker.pkg.dev

    # Extract variables and set them as environment variables
    - name: Extract and set environment variables
      run: |
        echo "NEXT_PUBLIC_FIREBASE_API_KEY=${{ secrets.STAGE_NEXT_PUBLIC_FIREBASE_API_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${{ secrets.STAGE_NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_FIREBASE_PROJECT_ID=${{ secrets.STAGE_NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${{ secrets.STAGE_NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.STAGE_NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_FIREBASE_APP_ID=${{ secrets.STAGE_NEXT_PUBLIC_FIREBASE_APP_ID }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_BASE_URL=${{ secrets.STAGE_NEXT_PUBLIC_BASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SKIP_PRO_CHECK=${{ secrets.STAGE_NEXT_PUBLIC_SKIP_PRO_CHECK }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_GITHUB_APP_NAME=${{ secrets.STAGE_NEXT_PUBLIC_GITHUB_APP_NAME }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_CONVERSATION_BASE_URL=${{ secrets.STAGE_NEXT_PUBLIC_CONVERSATION_BASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_POSTHOG_KEY=${{ secrets.STAGE_NEXT_PUBLIC_POSTHOG_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_POSTHOG_HOST=${{ secrets.STAGE_NEXT_PUBLIC_POSTHOG_HOST }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_POTPIE_PLUS_URL=${{ secrets.STAGE_NEXT_PUBLIC_POTPIE_PLUS_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_APP_URL=${{ secrets.STAGE_NEXT_PUBLIC_APP_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUBSCRIPTION_BASE_URL=${{ secrets.STAGE_NEXT_PUBLIC_SUBSCRIPTION_BASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_HMAC_SECRET_KEY=${{ secrets.STAGE_NEXT_PUBLIC_HMAC_SECRET_KEY }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_FORMBRICKS_ENVIRONMENT_ID=${{ secrets.STAGE_NEXT_PUBLIC_FORMBRICKS_ENVIRONMENT_ID }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_FORMBRICKS_API_HOST=${{ secrets.STAGE_NEXT_PUBLIC_FORMBRICKS_API_HOST }}" >> $GITHUB_ENV

    # Build the Docker image
    - name: Build
      run: |-
        BRANCH_NAME=${GITHUB_HEAD_REF//\//-}
        IMAGE_TAG="$GAR_ZONE-docker.pkg.dev/$PROJECT_ID/$GAR_REPO/nextjs-app-pr:$BRANCH_NAME-$GITHUB_SHA"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        docker build \
          --tag "$IMAGE_TAG" \
          --build-arg NEXT_PUBLIC_FIREBASE_API_KEY="${{ env.NEXT_PUBLIC_FIREBASE_API_KEY }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="${{ env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_PROJECT_ID="${{ env.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="${{ env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="${{ env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}" \
          --build-arg NEXT_PUBLIC_FIREBASE_APP_ID="${{ env.NEXT_PUBLIC_FIREBASE_APP_ID }}" \
          --build-arg NEXT_PUBLIC_BASE_URL="${{ env.NEXT_PUBLIC_BASE_URL }}" \
          --build-arg NEXT_PUBLIC_SKIP_PRO_CHECK="${{ env.NEXT_PUBLIC_SKIP_PRO_CHECK }}" \
          --build-arg NEXT_PUBLIC_GITHUB_APP_NAME="${{ env.NEXT_PUBLIC_GITHUB_APP_NAME }}" \
          --build-arg NEXT_PUBLIC_CONVERSATION_BASE_URL="${{ env.NEXT_PUBLIC_CONVERSATION_BASE_URL }}" \
          --build-arg NEXT_PUBLIC_POSTHOG_KEY="${{ env.NEXT_PUBLIC_POSTHOG_KEY }}" \
          --build-arg NEXT_PUBLIC_POSTHOG_HOST="${{ env.NEXT_PUBLIC_POSTHOG_HOST }}" \
          --build-arg NEXT_PUBLIC_POTPIE_PLUS_URL="${{ env.NEXT_PUBLIC_POTPIE_PLUS_URL }}" \
          --build-arg NEXT_PUBLIC_APP_URL="${{ env.NEXT_PUBLIC_APP_URL }}" \
          --build-arg NEXT_PUBLIC_SUBSCRIPTION_BASE_URL="${{ env.NEXT_PUBLIC_SUBSCRIPTION_BASE_URL }}" \
          --build-arg NEXT_PUBLIC_HMAC_SECRET_KEY="${{ env.NEXT_PUBLIC_HMAC_SECRET_KEY }}" \
          --build-arg NEXT_PUBLIC_FORMBRICKS_ENVIRONMENT_ID="${{ env.NEXT_PUBLIC_FORMBRICKS_ENVIRONMENT_ID }}" \
          --build-arg NEXT_PUBLIC_FORMBRICKS_API_HOST="${{ env.NEXT_PUBLIC_FORMBRICKS_API_HOST }}" \
          -f Dockerfile .

    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$IMAGE_TAG"

    # Deploy to Cloud Run
    - name: Deploy to Cloud Run
      run: |-
        gcloud run deploy "pr-${GITHUB_HEAD_REF}" \
          --image "$IMAGE_TAG" \
          --region $GAR_ZONE \
          --platform managed \
          --allow-unauthenticated \
          --port 3000 \
          --memory 2Gi \
          --cpu 2

        SERVICE_URL=$(gcloud run services describe "pr-${GITHUB_HEAD_REF}" --region $GAR_ZONE --format 'value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    # Post a comment on the pull request with the Cloud Run URL
    - name: Comment on PR
      uses: actions/github-script@v6
      with:
        script: |
          const pr_number = context.issue.number;
          const url = process.env.SERVICE_URL;
          const comment = `Cloud Run service deployed: [${url}](${url})`;
          github.rest.issues.createComment({
            ...context.repo,
            issue_number: pr_number,
            body: comment
          });

  cleanup:
    if: github.event.action == 'closed'
    name: Cleanup Cloud Run Service
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: false

    # Setup gcloud CLI
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.STAGE_GKE_SA_KEY }}'

    # Delete Cloud Run Service
    - name: Delete Cloud Run Service
      run: |-
        BRANCH_NAME=${GITHUB_HEAD_REF//\//-}
        SERVICE_URL=$(gcloud run services describe "pr-${BRANCH_NAME}" --region $GAR_ZONE --format 'value(status.url)')
        gcloud run services delete "pr-${BRANCH_NAME}" --region $GAR_ZONE --platform managed --quiet

